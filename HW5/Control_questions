1. Основополагающие концепции ООП:
1.1. Инкапсуляция: слияние приватных данных и публичных методов;
1.2. Полиморфизм: разные реализации в одинаковом интерфейсе;
1.3. Наследование: передача чего-либо от родителей потомкам -> абстракция.

2. При проектировании классов следует учитывать следующие аспекты:
2.1. Если тип секции не указан, по умолчанию он считается приватным;
2.2. Располагать и именовать данные следует следующим образом: сначала конструкторы и деструктор, после др. специальные функции-члены,
геттеры/сеттеры, данные-члены.
2.3. Внутри класса следует располагать только маленькие и/или специальные функции-члены, а большие - выносить за пределы класса.
Также тип данных auto использовать только для маленьких тривиальных функций-членов.
2.4. При использовании static (const) для данных членов необходимо определение.

3. При использовании разделения мы можем на полную использовать полиморфизм; использования интерфейса удобно для разделения различных
по смыслу частей кода; также удобно в интерфейсе прописать все необходимые для дальнейшей работы библиотеки и классы, чтобы после 
использовать их в программе.

4. Внешнее связывание имеют те сущности, к которым можно обратиться в юните трансляции, отличного от того, где они определены(extern int object). 
При внешнем связывании несколько единиц трансляции обращаются к одному и тому же объекту в памяти.
Внутренее связывание отличается от внешнего тем, что к сущности имеющей внутренее связывание нельзя обратиться из юнита трансляции, 
отличного от того, где она определена (static int x = 42).

5. Проще ответить на противоположный вопрос: для чего нужны неименованные пространства имён.
По сути, неименованные пространства имён обладают той же пользой, что и при использовании static во внутренней линковке - 
переменные, определённые внутри тела пространства имён становятся локальными.
То есть, именнованые пространства имён позволяют использовать сущности "глобально" (помимо очевидного использования функций,
определённых в этом пространстве имён).
