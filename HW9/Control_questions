1. Шаблон - специальная конструкция, которая позволяет написать общий алгоритм, тип аргументов которого будет определён при компиляции (если нет специализации для шаблона)
Шаблоны делятся на 4 разновидности:
1) Шаблоны функций - задают семейство функций с общими свойствами. Тип функции определяется на этапе компиляции (то есть имеется перегрузка). Шаблоны функций нельзя
разделять на объявления и определение в разных юнитах трансляции (вообще как-то можно это хитро сделать с помощью ключевого слова export, но не нужно), нельзя создать
шаблон для виртуальных функций;
2) Шаблоны классов - задаёт класс, в котором параметризуются задействованные в классе типы;
3) Шаблон псевдонима - параметризованный тип псевдонима;
4) Шаблон переменных - переменная с универсальным типом (на примере числа пи, может быть int, double, float в зависимости от ситуации).
Короче говоря, для всех 4 разновидностей суть аналогична.

2. Компилирование шаблона выполняется компилятором в два этапа:
1) Проверка кода без подстановки конкретного типа (могут быть синтаксические ошибки типа пропущенна ";");
2) Проверка кода с подстановкой конкретного типа (уже могут быть смысловые ошибки, например если не определена операция сравнения для используемых типов)

3. Компилятор "ленивый" и предпочитает использовать явную перегрузку, а не шаблонную (так же он предпочтёт полную/частичную специализацию, 
т.к. нужно сделать меньше действий);

4. Истанцирование происходит только для использованных функций-членов. Это удобно тем, что если для какого-то типа работа шаблона может быть 
некорректной, функцию-член можно просто не вызывать и ошибки не появится.

5. Полная и/или частичная специализация требуется для описания работы шаблона для конкретных указанных типов аргументов. Полная специализация подразуемвает задание 
определенных типов всех аргументов, а частичная, соответсвенно, - части из них. Частичная специализация невозможно для функций, но возможна для классов.
